---
name: Run CI
on:
  push:
    branches:
      - '**'          # matches every branch
      - '!gh-pages'   # excludes gh-pages branch
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.6'
          - '3.9'

    name: Python ${{ matrix.python-version }} unit tests
    steps:
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Note Python version/implementation
        run: |
          which python
          python -c 'import sys; print(sys.version)'
          python -c 'import platform; print(platform.python_implementation())'
          python -m pip cache dir

      - name: checkout DE Modules
        uses: actions/checkout@v2
        with:
          path: decisionengine_modules

      - name: checkout DE Framework
        uses: actions/checkout@v2
        with:
          path: decisionengine
          repository: HEPCloud/decisionengine

      - name: checkout GlideinWMS for python3
        uses: actions/checkout@v2
        with:
          path: glideinwms
          repository: glideinWMS/glideinwms
          ref: branch_v3_9

      - name: Install dependencies for GlideinWMS
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel
          python -m pip install -r ${{ github.workspace }}/glideinwms/requirements.txt

      - name: Install dependencies for DE Framework
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel
          python -m pip install --upgrade pytest
          python -m pip install -r ${{ github.workspace }}/decisionengine/requirements.txt

      - name: Install DE Modules dependencies
        run: |
          cd ${{ github.workspace }}/decisionengine_modules
          python -m pip install --upgrade pip
          python -m pip install --upgrade pytest
          python -m pip install -r requirements.txt
          python -m pip install --index-url https://test.pypi.org/simple --no-deps bill-calculator-hep-mapsacosta==0.0.9

      - name: Run Unit Tests on Python ${{ matrix.python-version }}
        env:
          PYTHONPATH: ${{ github.workspace }}/../:${{ github.workspace }}
        run: |
          cd ${{ github.workspace }}/decisionengine_modules
          pytest --cov-report term --cov-report xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          flags: python-${{ matrix.python-version }}

  build_doc:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Note Python version/implementation
        run: |
          which python
          python -c 'import sys; print(sys.version)'
          python -c 'import platform; print(platform.python_implementation())'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-psycopg2 latexmk texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install sphinx
      - name: Build documentation
        env:
          PYTHONPATH: ${{ github.workspace }}/../
        run: |
          cd doc
          make rst html latexpdf
